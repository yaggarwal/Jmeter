Initialli there are tow folders:

Test Plan and WorkBench


Workbench - used for rough work. You do recording and the paste it into test plan.

For Recording  - you need to set proxy in firefox first.
Configure proxy configurations in Jmeter - Right click Workbench -> Add Non Test elements -> HTTPS(S) Test Script recorder
     - Set the port as same in firefox
     - Grouping - Put each group in new controller
     - Target controller - Workbench - HTTP(s) test Script recorder
     - Add any suggested  excudes - to rove request liks CSS , image etc
     -  hit start button



Putting load
===========
1. Right click Test plan -> Thread (Users) -> Add Thread group

Thread here -> is a virtual user that put load on an application

In thread group we define:
   -> No of thread (users)
   -> Ramp up time
   -> Loop Count
   -> Scheduler -> We can specify the duration in seconds for which test should run. The test will stop after running the specified amount of time
                   and report the results till which it has executed.
   
2. Within the thread group put the simple controller (http request). You can copy this from the workbench
3. Adding Listners to view reports. Right Click Test Plan -> Add Listner -> View Results in Table


Reporting Paramters:
===================
Through put -  Work done by machine per unit time . In this case it is the no of bytes returned by machine per minute. You need to make sure that
               thourgh put does not descrease with the increase in load. It should be remain uniform. See this in the graj results. If the graph 
               shows decrease in through put with the increase in load it means application is not able to cope up with the increasing load.
               
               - It is also defined as the no of requests serverd by server in 1 minute.
                 Say we have 4 pertol bunks. Each can server 100 litres of petrol in 1 minute. So throught put of 1 bunk is 100 liters/minute.
                 Total through put is 400 liters/minutes (as there are 4 bunks.)
                 Now when 2 cars come  - total through put will be 200 liters -- one - one bunk will serve both cars and 2 are idle.
                 When 4 cars come - total through put will be 400 - all 4 bunks are used in serving
                 Now when 10 cars come then also the total through put will remain 400 litres/minute only. This is the maximun it can server.
                 Other cars must stand in a queue for their chance.
                 As a analogy consider this petrol bunk as a SERVER MACHINE.
                 
Deviation -  Deviation should be smaller. It should not increase with the increasing load.

Additonal Plugins
-------------------
Download the jars and place in jmeter/lib/ext folder and restart jmeter.
 Example: step up thread group for simulating real time users
 There also exists for integration with selenium, hadoop etc
 
Listners:
Graph results
View results in table
View results in tree -  this is handly when we write end to end complete scritping


Assertions:
-----------
In Performance testing you should have aleady some benchmarks defined like:
 - How many bytes will be returned in response
 - what is the response code of the request
 - In how many time (milliseconds) the response should be received.

Verify some valid response for each request to make sure that request was successful.
Also add  HTTP Cookie Manager for maintaining site sessions. Jmeter will not maintain sessions by default.
  Right click Thread group -> Add Config element -> HTTP Cookie Manager
  
  SIZE ASSERTION
 - In Performance Testing you must know the size of bytes that will be returned by server. And you must put that in assertion.
   If it fails it means there is some issue in the application. For this you must use "SIZE ASSERTION"
   
  DURATION ASSERTION
   - put an assertion in how much milliseconds the response must be received
   
  HTML Assertions
   - It simply checks that html response received is valid html as per coding standards.
   
  RESPONSE ASSERTION
   - To simply validate some text in response text
   - to validate response code
   
   
   
CONTROLLERS
----------
Contoller is basically a block which consists of a set of requests to be performed. You can execute certain requests  based on certain conditions.

SIMPLE CONTROLLER
---------------
It simply contains a  set of requests.

LOOP CONTROLLER --  executes request in a controller the specified number of time.
WHILE CONTROLLER -  executes requests in a controller till the condition is true
IF CONTROLLER  -  executes only once but only if confition is true
INTERLEAVE CONTROLLER - executes requests in a controller alernately. For 1st iteration it will execute 1 first..for second iteration it will
   execute second request in the controller. All requests will not be executed in a single iteration in interleave controller.
RANDOM CONTROLLER - Its like interleave  but instaed of picking request alternatly it pick requests randomly.
RUNTIME CONTROLLER - It specifies request in this controller for the amount of duration (time) specified. It will executes all requests in this
                     controller for the amount of time specified.
                     
Where they are used:   All these are used in simulating real time scenarios.
Example: 1. On Payment Page .. process only if credit card is valid. So you can use If controller
         2. On E-Commerce site..one section is for men, one for women, another for general. All people in real time will not be visiting men section
                                at the same time. Although load is on our application but they are on different pages. So we should use interleave or
                                random controller for this.

TRANSACTION CONTROLLER - Checking the flow end to end. Example: Credit card payment has 4 step process. So these 4 step (request) should be
                         treated as 1 transaction. instaed of reporting for each single equest we report the values for this single transaction
                         i.e end to end.
                         Another example will be new account registrtaion process (multiple steps), money transfer etc
                         
                         
TIMERS
=======

Constant Timer  - to give a sleep between next thread starts . Timers are not used much in real time.

COnstant Through put timer -> 


Regular Expressions
===================
Example:  Hit the first request say hit to login page.
  In response text (source code of the page , there is username and password that is be filled as credentials). So you need to fetch this
     username and password from the response using the regular expressions
   Once you fetch the values, you pass these dynamic values in the second request.
   
  Use PostProcessor -> Regular expression extractor in your request to fetch the values . It should be post processor.
  
  
Data Driven testing
-------------------
Reading data from Excel:
Right CLick Thread group -> Add Config element - > CSV data set config
